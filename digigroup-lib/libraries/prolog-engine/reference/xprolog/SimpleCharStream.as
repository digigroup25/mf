/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 2.1 */
/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */

package xprolog {
public final class SimpleCharStream
{
  public static final var staticFlag:Boolean= false;
  var bufsize:int;
  var available:int;
  var tokenBegin:int;
  public var bufpos:int= -1;
  private var bufline:Array;
  private var bufcolumn:Array;

  private var column:int= 0;
  private var line:int= 1;

  private var prevCharIsCR:Boolean= false;
  private var prevCharIsLF:Boolean= false;

  private var inputStream:java.io.Reader;

  private var buffer:Array;
  private var maxNextCharInd:int= 0;
  private var inBuf:int= 0;

  private final function ExpandBuff(wrapAround:Boolean):void {
     var newbuffer:Array= new Array(bufsize + 2048);
     var newbufline:Array = new Array(bufsize + 2048);
     var newbufcolumn:Array = new Array(bufsize + 2048);

     try
     {
        if (wrapAround)
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           System.arraycopy(buffer, 0, newbuffer,
                                             bufsize - tokenBegin, bufpos);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
           bufcolumn = newbufcolumn;

           maxNextCharInd = (bufpos += (bufsize - tokenBegin));
        }
        else
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           bufcolumn = newbufcolumn;

           maxNextCharInd = (bufpos -= tokenBegin);
        }
     }
     catch (t:Error)
     {
        throw new Error(t.getMessage());
     }


     bufsize += 2048;
     available = bufsize;
     tokenBegin = 0;
  }

  private final function FillBuff():void
  {
     if (maxNextCharInd == available)
     {
        if (available == bufsize)
        {
           if (tokenBegin > 2048)
           {
              bufpos = maxNextCharInd = 0;
              available = tokenBegin;
           }
           else if (tokenBegin < 0)
              bufpos = maxNextCharInd = 0;
           else
              ExpandBuff(false);
        }
        else if (available > tokenBegin)
           available = bufsize;
        else if ((tokenBegin - available) < 2048)
           ExpandBuff(true);
        else
           available = tokenBegin;
     }

     var i:int;
     try {
        if ((i = inputStream.read(buffer, maxNextCharInd,
                                    available - maxNextCharInd)) == -1)
        {
           inputStream.close();
           throw new java.io.IOException();
        }
        else
           maxNextCharInd += i;
        return;
     }
     catch(e:java.io.IOException) {
        --bufpos;
        backup(0);
        if (tokenBegin == -1)
           tokenBegin = bufpos;
        throw e;
     }
  }

  public final function BeginToken():String
  {
     tokenBegin = -1;
     var c:String= readChar();
     tokenBegin = bufpos;

     return c;
  }

  private final function UpdateLineColumn(c:String):void {
     column++;

     if (prevCharIsLF)
     {
        prevCharIsLF = false;
        line += (column = 1);
     }
     else if (prevCharIsCR)
     {
        prevCharIsCR = false;
        if (c == '\n')
        {
           prevCharIsLF = true;
        }
        else
           line += (column = 1);
     }

     switch (c)
     {
        case '\r' :
           prevCharIsCR = true;
           break;
        case '\n' :
           prevCharIsLF = true;
           break;
        case '\t' :
           column--;
           column += (8- (column & 07));
           break;
        default :
           break;
     }

     bufline[bufpos] = line;
     bufcolumn[bufpos] = column;
  }

  public final function readChar():String
  {
     if (inBuf > 0)
     {
        --inBuf;

        if (++bufpos == bufsize)
           bufpos = 0;

        return buffer[bufpos];
     }

     if (++bufpos >= maxNextCharInd)
        FillBuff();

     var c:String= buffer[bufpos];

     UpdateLineColumn(c);
     return (c);
  }

  /**
   * @deprecated 
   * @see #getEndColumn
   */

  public final function getColumn():int {
     return bufcolumn[bufpos];
  }

  /**
   * @deprecated 
   * @see #getEndLine
   */

  public final function getLine():int {
     return bufline[bufpos];
  }

  public final function getEndColumn():int {
     return bufcolumn[bufpos];
  }

  public final function getEndLine():int {
     return bufline[bufpos];
  }

  public final function getBeginColumn():int {
     return bufcolumn[tokenBegin];
  }

  public final function getBeginLine():int {
     return bufline[tokenBegin];
  }

  public final function backup(amount:int):void {

    inBuf += amount;
    if ((bufpos -= amount) < 0)
       bufpos += bufsize;
  }

  /* public function SimpleCharStream(dstream:java.io.Reader, startline:int,
  startcolumn:int, buffersize:int)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
  }

  public function SimpleCharStream(dstream:java.io.Reader, startline:int,
                                                           startcolumn:int)
  {
     this(dstream, startline, startcolumn, 4096);
  }

  public function SimpleCharStream(dstream:java.io.Reader)
  {
     this(dstream, 1, 1, 4096);
  } */
  public function ReInit(dstream:java.io.Reader, startline:int,
  startcolumn:int, buffersize:int):void {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    if (buffer == null || buffersize != buffer.length)
    {
      available = bufsize = buffersize;
      buffer = new char[buffersize];
      bufline = new int[buffersize];
      bufcolumn = new int[buffersize];
    }
    prevCharIsLF = prevCharIsCR = false;
    tokenBegin = inBuf = maxNextCharInd = 0;
    bufpos = -1;
  }

  public function ReInit(dstream:java.io.Reader, startline:int,
                                                           startcolumn:int):void {
     ReInit(dstream, startline, startcolumn, 4096);
  }

  public function ReInit(dstream:java.io.Reader):void {
     ReInit(dstream, 1, 1, 4096);
  }
  /* public function SimpleCharStream(dstream:java.io.InputStream, startline:int,
  startcolumn:int, buffersize:int=4096)
  {
     this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
  }

   public function SimpleCharStream(dstream:java.io.InputStream, startline:int,
                                                           startcolumn:int)
  {
     this(dstream, startline, startcolumn, 4096);
  } 

  public function SimpleCharStream(dstream:java.io.InputStream)
  {
     this(dstream, 1, 1, 4096);
  }
 */
  public function ReInit(dstream:java.io.InputStream, startline:int,
                          startcolumn:int, buffersize:int):void {
     ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
  }

  public function ReInit(dstream:java.io.InputStream):void {
     ReInit(dstream, 1, 1, 4096);
  }
  public function ReInit(dstream:java.io.InputStream, startline:int,
                                                           startcolumn:int):void {
     ReInit(dstream, startline, startcolumn, 4096);
  }
  public final function GetImage():String {
     if (bufpos >= tokenBegin)
        return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
     else
        return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                              new String(buffer, 0, bufpos + 1);
  }

  public final function GetSuffix(len:int):String
  {
     var ret:Array= new char[len];

     if ((bufpos + 1) >= len)
        System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
     else
     {
        System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                          len - bufpos - 1);
        System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
     }

     return ret;
  }

  public function Done():void {
     buffer = null;
     bufline = null;
     bufcolumn = null;
  }

  /**
   * Method to adjust line and column numbers for the start of a token.<BR>
   */
  public function adjustBeginLineColumn(newLine:int, newCol:int):void {
     var start:int= tokenBegin;
     var len:int;

     if (bufpos >= tokenBegin)
     {
        len = bufpos - tokenBegin + inBuf + 1;
     }
     else
     {
        len = bufsize - tokenBegin + bufpos + 1+ inBuf;
     }

     var i:int= 0, j = 0, k = 0;
     var nextColDiff:int= 0, columnDiff = 0;

     while (i < len &&
            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
     {
        bufline[j] = newLine;
        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
        bufcolumn[j] = newCol + columnDiff;
        columnDiff = nextColDiff;
        i++;
     } 

     if (i < len)
     {
        bufline[j] = newLine++;
        bufcolumn[j] = newCol + columnDiff;

        while (i++ < len)
        {
           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
              bufline[j] = newLine++;
           else
              bufline[j] = newLine;
        }
     }

     line = bufline[j];
     column = bufcolumn[j];
  }

}
}