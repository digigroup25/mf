/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */

package xprolog {
	public class ParserTokenManager implements ParserConstants
{
  public  var debugStream:java.io.PrintStream= System.out;
  public  function setDebugStream(ds:java.io.PrintStream):void { debugStream = ds; }
private final function jjStopStringLiteralDfa_0(pos:int, active0:Number):int {
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80) != 0)
            return 13;
         if ((active0 & 0x2000000) != 0)
         {
            jjmatchedKind = 8;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final function jjStartNfa_0(pos:int, active0:Number):int {
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final function jjStopAtPos(pos:int, kind:int):int {
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final function jjStartNfaWithStates_0(pos:int, kind:int, state:int):int {
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(e:java.io.IOException) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final function jjMoveStringLiteralDfa0_0():int {
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 7, 13);
      case 40:
         return jjStopAtPos(0, 23);
      case 41:
         return jjStopAtPos(0, 24);
      case 44:
         return jjStopAtPos(0, 22);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x2000000);
      case 46:
         return jjStopAtPos(0, 20);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x280000);
      case 59:
         return jjStopAtPos(0, 26);
      case 91:
         return jjStopAtPos(0, 27);
      case 93:
         return jjStopAtPos(0, 28);
      case 124:
         return jjStopAtPos(0, 29);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final function jjMoveStringLiteralDfa1_0(active0:Number):int {
   try { curChar = input_stream.readChar(); }
   catch(e:java.io.IOException) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x80000) != 0)
            return jjStopAtPos(1, 19);
         break;
      case 61:
         if ((active0 & 0x200000) != 0)
            return jjStopAtPos(1, 21);
         break;
      case 62:
         if ((active0 & 0x2000000) != 0)
            return jjStopAtPos(1, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final function jjCheckNAdd(state:int):void {
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final function jjAddStates(start:int, end:int):void {
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final function jjCheckNAddTwoStates(state1:int, state2:int):void {
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final function jjCheckNAddStates(start:int, end:int):void {
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final function jjCheckNAddStates(start:int):void {
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final var jjbitVec0:Array= [
   0, 0, 0, 0];
private final function jjMoveNfa_0(startState:int, curPos:int):int {
   var nextStates:Array;
   var startsAt:int= 0;
   jjnewStateCnt = 26;
   var i:int= 1;
   jjstateSet[0] = startState;
   var j:int, kind = 0x7;
   for (;;)
   {
      if (++jjround == 0x7)
         ReInitRounds();
      if (curChar < 64)
      {
         var l:Number= 1<< curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000 & l) != 0)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAdd(18);
                  }
                  else if ((0x7000000000000000  & l) != 0 )
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if ((0x840000000000  & l) != 0 )
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if ((0x280000000000  & l) != 0 )
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(20, 21);
                  else if (curChar == 33)
                     jjCheckNAdd(13);
                  else if (curChar == 37)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 60)
                     jjCheckNAdd(13);
                  else if (curChar == 62)
                     jjCheckNAdd(13);
                  else if (curChar == 61)
                     jjCheckNAdd(13);
                  break;
               case 1:
                  if ((0xffffffffffffdbff  & l) != 0 )
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400 & l) != 0  && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x280000000000  & l) != 0 && kind > 8)
                     kind = 8;
                  break;
               case 6:
                  if ((0x840000000000  & l) != 0 && kind > 9)
                     kind = 9;
                  break;
               case 10:
                  if ((0x7000000000000000  & l) != 0 && kind > 10)
                     kind = 10;
                  break;
               case 13:
                  if (curChar == 61&& kind > 10)
                     kind = 10;
                  break;
               case 14:
                  if (curChar == 61)
                     jjCheckNAdd(13);
                  break;
               case 15:
                  if (curChar == 33)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if (curChar == 62)
                     jjCheckNAdd(13);
                  break;
               case 17:
                  if (curChar == 60)
                     jjCheckNAdd(13);
                  break;
               case 18:
                  if ((0x3ff000000000000  & l) == 0 )
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0xffffff7fffffdbff  & l) != 0 )
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 39&& kind > 13)
                     kind = 13;
                  break;
               case 23:
                  if ((0x3ff000000000000  & l) == 0 )
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x3ff000000000000  & l) == 0 )
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         var l:Number= 1 << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                   if ((0x87fffffe  & l) != 0 )
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAdd(23);
                  }
                  else if ((0x7fffffe00000000  & l) != 0 )
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAdd(25);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 7:
                  if (curChar == 100&& kind > 9)
                     kind = 9;
                  break;
               case 8:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 115&& kind > 10)
                     kind = 10;
                  break;
               case 12:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 20:
                  if ((0xffffffffefffffff  & l) != 0 )
                     jjAddStates(3, 4);
                  break;
               case 22:
                  if ((0x87fffffe  & l) == 0 )
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x7fffffe87fffffe  & l) == 0 )
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x7fffffe00000000  & l) == 0 )
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x7fffffe87fffffe  & l) == 0 )
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         var i2:int= (curChar & 0xff) >> 6;
         var l2:Number= 1 << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0 )
                     jjAddStates(0, 2);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0 )
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26- (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(e:java.io.IOException) { return curPos; }
   }
}
static final var jjnextStates:Array= [
   1, 2, 4, 20, 21
];
public static final var jjstrLiteralImages:Array= [
"", null, null, null, null, null, null, "\41", null, null, null, null, null, 
null, null, null, null, null, null, "\72\55", "\56", "\72\75", "\54", "\50", "\51", 
"\55\76", "\73", "\133", "\135", "\174"];
public static final var lexStateNames:Array= [
   "DEFAULT"
];
static final var jjtoToken:Array= [
   0x3ff8ef81
];
static final var jjtoSkip:Array= [
   0x7e
];
static final var jjtoSpecial:Array= [
   0x40
];
private var input_stream:SimpleCharStream;
private final var jjrounds:Array= new int[26];
private final var jjstateSet:Array= new int[52];
protected var curChar:String;
public function ParserTokenManager(stream:SimpleCharStream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
/* public function ParserTokenManager(stream:SimpleCharStream, lexState:int)
{
   this(stream);
   SwitchTo(lexState);
} */
public function ReInit(stream:SimpleCharStream):void {
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final function ReInitRounds():void {
   var i:int;
   jjround = 0x80000001;
   for (i = 26; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
/* public function ReInit(stream:SimpleCharStream, lexState:int):void {
   ReInit(stream);
   SwitchTo(lexState);
} */
public function SwitchTo(lexState:int):void {
   if (lexState >= 1|| lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final function jjFillToken():Token {
   var t:Token= Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   var im:String= jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

var curLexState:int= 0;
var defaultLexState:int= 0;
var jjnewStateCnt:int;
var jjround:int;
var jjmatchedPos:int;
var jjmatchedKind:int;

public final function getNextToken():Token {
  var kind:int;
  var specialToken:Token= null;
  var matchedToken:Token;
  var curPos:int= 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(e:java.io.IOException)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600 & (1<< curChar)) != 0)
         curChar = input_stream.BeginToken();
   }
   catch (e1:java.io.IOException) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1< curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1<< (jjmatchedKind & 077))) != 0)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1<< (jjmatchedKind & 077))) != 0)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   var error_line:int= input_stream.getEndLine();
   var error_column:int= input_stream.getEndColumn();
   var error_after:String= null;
   var EOFSeen:Boolean= false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (e1:java.io.IOException) {
      EOFSeen = true;
      error_after = curPos <= 1? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
}
