<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:components="components.*"
				xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="absolute"
				creationComplete="init()"
				implements="mf.framework.IMessenger"
				>
	<mx:VBox width="100%"
			 height="100%"
			 >
		<mx:HBox>
			<mx:Button label="init"
					   click="init()"
					   />
			<mx:Button label="uninit"
					   click="uninit()"
					   />
			<mx:Button label="action"
					   click="action()"
					   />
			<mx:Button label="replay"
					   click="replay()"
					   />
			<mx:Button label="update node"
					   click="updateNode()"
					   />
		</mx:HBox>
		<mx:HBox id="box"
				 width="100%"
				 height="100%"
				 />
		<!--<mx: id="treeContainer" width="100%" height="100%"/>-->
		<!--<components:TreeView2 id="treeContainer" width="100%" height="100%"/>-->
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import collections.IIterator;
			import collections.TreeCollectionEx;

			import factories.TreeFactory;

			import mf.framework.*;

			import mindmaps.history.HistoryController;
			import mindmaps.history.HistoryMessages;
			import mindmaps.history.HistoryMessagesFactory;
			import mindmaps.map.MapModel2;
			import mindmaps.map.MapModel2Factory;
			import mindmaps.map.NodeLocation;
			import mindmaps.map.messages.NodeMessageFactory;
			import mindmaps.map.ui.TreeContainer2Factory;
			import mindmaps.map.ui.actions.messages.MapMessageFactory;
			import mindmaps.map.ui.tree.components.TreeView2;

			import mindmaps2.elements.ElementFactory;

			import mx.controls.Tree;

			import vos.Appointment;
			import vos.Task;

			private static const RANDOM_TREE_SIZE:int = 10;

			private static const RANDOM_ACTIONS:int = 20;

			private static const ADD_AT_LEAST:int = 10;

			private static const TIMER_INTERVAL:int = 1000;

			private var c:IContainer;

			private var c2:IContainer;

			private var mb:IMessageBroker;

			private var mb2:IMessageBroker;

			private var treeContainer:TreeView2;

			private var map:MapModel2;

			private var map2:MapModel2;

			private var nodeCounter:int = 0;

			private var timer:Timer;

			private var nodeMessages:NodeMessageFactory;

			private var mapMessages:MapMessageFactory;

			private var generatedNodes:Array = new Array();

			public function receive(m:Message):void {
				switch (m.name) {
					case HistoryMessages.REPLAYED_ACTION:
						onReplayed(m);
						break;
				}
			}


			public function send(m:Message, itself:Boolean = false):void {
			}


			private function init():void {
				mb = new MessageTraceBroker();
				mb2 = new MessageTraceBroker();
				mb2.subscribe(this);

				nodeMessages = new NodeMessageFactory(c);
				mapMessages = new MapMessageFactory(c);
				//var map:TreeCollectionEx = new TreeFactory().createParentChildHPTaskTree();
				//var map:TreeCollectionEx = new TreeFactory().createTaskAppointment();
				map = new MapModel2Factory().createEmptyMap(""); //(null);//new TreeFactory().createRandomVoTree(RANDOM_TREE_SIZE, [Task], true));
				map.nodes = new ElementFactory().createTask("root task");
				map2 = new MapModel2Factory().createEmptyMap(""); //new MapModel2(/* map.nodes.clone() */null);
				//increment nodeCounter
				nodeCounter = /*RANDOM_TREE_SIZE+*/ 1;

				//var mapFilters:ViewDataFilterMap = ViewDataFilterFactory.createMapFilters();
				/* treeContainer = new TreeView2();
				 box.addChild(treeContainer); */

				//commented out to compile since createWithHistory is removed
				//c = TreeContainer2Factory.createWithHistory(mb, map, box, mapFilters, null);
				//c2 = TreeContainer2Factory.createWithHistory(mb2, map2, box, mapFilters, null);
				c.initialize();
				c2.initialize();
			}


			private function uninit():void {
				c.uninitialize();
				//mb.uninitialize();
				mb = null;

				c = null;

				//box.removeChild(treeContainer);//.parent.removeChild(treeContainer);
				treeContainer = null;
			}


			private function action():void {


				timer = new Timer(TIMER_INTERVAL, RANDOM_ACTIONS);
				timer.addEventListener(TimerEvent.TIMER, onTimer);
				timer.start();
			}


			private function onTimer(event:TimerEvent):void {
				var random:Number = Math.random();

				var m:Message;
				trace("random:", random);
				if (nodeCounter < ADD_AT_LEAST) {
					m = addNodeToSubtree();
				}
				/* else if (random<0.3) {
				 //m = removeNodeFromGenerated();
				 m = removeNodeFromSubtree();
				 } */else if (random >= 0 && random < 0.6) {
					 //m = addNodeToGenerated();
					m = updateNodeData();
				} else {
					m = addNodeToSubtree();
				}
				if (m != null) {
					c.send(m);
				}
			}


			private function getRandomNodeIndex():int {
				var randomIndex:int = int(Math.floor(Math.random() * (map.nodes.size - 1) + 1));
				return randomIndex;
			}


			private function updateNodeData():Message {
				var randomIndex:int = getRandomNodeIndex();

				trace("random index", randomIndex);
				var it:IIterator = map.nodes.createIterator();
				for (var i:int = 0; i < randomIndex - 1; i++) {
					it.next();
				}
				var node:TreeCollectionEx = TreeCollectionEx(it.next());
				var newPriority:int = Math.ceil(Math.random() * 10) as int;
				var m:Message = nodeMessages.UpdateNodeData(node, [ "vo", "priority" ], node.vo.priority, newPriority);
				return m;
			}


			private function addNodeToSubtree():Message {
				trace("add to subtree");
				var randomIndex:int = getRandomNodeIndex();

				trace("random index", randomIndex);
				var it:IIterator = map.nodes.createIterator();
				for (var i:int = 0; i < randomIndex - 1; i++) {
					it.next();
				}
				var addToNode:TreeCollectionEx = TreeCollectionEx(it.next());
				var newNode:TreeCollectionEx = new ElementFactory().createTask("task " + nodeCounter++);
				var m:Message = nodeMessages.AddNode(newNode, new NodeLocation(addToNode, 0));
				return m;
			}


			private function removeNodeFromSubtree():Message {
				//pick a random index for the size of the map, exclude root (1st element)
				trace("remove from subtree");
				var randomIndex:int = getRandomNodeIndex();
				if (randomIndex == 1) {
					randomIndex++;
				} //randomIndex cannot be 1 b/c it is a root

				trace("random index", randomIndex);
				var it:IIterator = map.nodes.createIterator();
				for (var i:int = 0; i < randomIndex - 1; i++) {
					it.next();
				}
				if (!it.hasNext()) {
					return null;
				}
				var deleteNode:TreeCollectionEx = TreeCollectionEx(it.next());
				var nodeLocation:NodeLocation = new NodeLocation(TreeCollectionEx(deleteNode.findParent(map.nodes)), -1);
				var m:Message = nodeMessages.RemoveNode(deleteNode, nodeLocation);
				return m;
			}


			private function removeNodeFromGenerated():Message {
				var randomIndex:int = int(Math.floor(Math.random() * generatedNodes.length));
				var deleteNode:TreeCollectionEx = TreeCollectionEx(generatedNodes.splice(randomIndex, 1)[0]);
				if (deleteNode == null) {
					return null;
				}
				var nodeLocation:NodeLocation = new NodeLocation(TreeCollectionEx(deleteNode.findParent(map.nodes)), -1);
				var m:Message = nodeMessages.RemoveNode(deleteNode, nodeLocation);
				return m;
			}


			private function addNodeToGenerated():Message {
				var newNode:TreeCollectionEx = new ElementFactory().createTask("task " + nodeCounter);
				generatedNodes.push(newNode);
				var m:Message = nodeMessages.AddNode(newNode, new NodeLocation(map.nodes, 0));
				nodeCounter++;
				return m;
			}


			private function replay():void {
				// TODO: 2011/06/19 KTD: Commented out to get module to compile.  This needs to be looked at.  Looks like it was written against the old control objects module.
				//detach history controller from mb
//			var hc:HistoryController = HistoryController(Container2(c).getChildByName("model").controllers[1]);
//			hc.mb.unsubscribe(hc);
//
//			//attach controller to mb2
//			hc.mb = mb2;
//			hc.mb.subscribe(hc);
//			AbstractController(Container2(c2).getChildByName("model").controllers[1]).uninitialize();
//			Container2(c2).controllers[1] = hc;
//			var historyMessages:HistoryMessagesFactory = new HistoryMessagesFactory(c2);
//			/* var tree:Tree = NodeInteractionController(Container2(c2).getChildByName("view").controllers[0]).treeView;
//			 tree.expandChildrenOf(tree.dataProvider[0], true); */
//			hc.send(historyMessages.ReplayAll(map2, TIMER_INTERVAL));
			}


			private function onReplayed(m:Message):void {
				// TODO: 2011/06/19 KTD: Commented out to get module to compile.  This needs to be looked at.  Looks like it was written against the old control objects module.
//			c2.send(mapMessages.RefreshMap());
//			var tree:Tree = NodeInteractionController(Container2(c2).getChildByName("view").controllers[0]).treeView;
//			tree.expandChildrenOf(tree.dataProvider[0], true);
				//tree.validateNow();
			}


			private function updateNode():void {
				var root:TreeCollectionEx = map.nodes;
				var updateNodeMessage:Message = nodeMessages.UpdateNodeData(root, [ "vo", "name" ], root.vo.name, "my task");
				c.send(updateNodeMessage);
			}
		]]>
	</mx:Script>
</mx:Application>
