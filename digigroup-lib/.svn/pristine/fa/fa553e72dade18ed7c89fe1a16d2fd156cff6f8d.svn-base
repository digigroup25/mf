/* Generated By:JavaCC: Do not edit this line. Parser.java */
package xprolog {
	public class Parser extends ParserConstants {

    public static function main(args:Array):void  
    {
        var kb:KnowledgeBase= new KnowledgeBase();
        var parser:Parser= new Parser( new StringReader(

                        "eq(X,X).   X=X.  fail :- eq(c,d). true. " +
                        "print(X) := 1." +
                        "nl         := 2." +
                        "assert(X)  := 3." +

                        "or(X,Y) :- call(X). or(X,Y) :- call(Y)."
        ));

        parser.primitives( kb );
        kb.dump(true);
    }

    public function getList(query:String):TermList  
    {
        resetVDict();
        ReInit( new StringReader( query ));
        return goals();
     }

    public function getTerm(query:String):Term  
    {
        ReInit( new StringReader( query ));
        resetVDict();
        return goal();
     }

    //static Hashtable vardict;
    //static int       varnum;
    var vardict:Hashtable;
    var varnum:int;
    public static var maxVarnum:int= 0;


    public function resetVDict():void {
        vardict = new Hashtable();
        varnum = 0;
    }

  final public function Program(kb:KnowledgeBase):void {
    label_1:
    while (true) {
      clause(kb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR_LITERAL:
      case ATOM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public function clause(kb:KnowledgeBase):void {
  var head:Term;
  var body:TermList= null;
  var c:Clause;
          resetVDict();
    head = pred();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      body = goals();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(20);
          c = new Clause( head, body);
          kb.addClause( c );
          // System.out.println("Clause: " + c);

  }

  final public function primitives(kb:KnowledgeBase):void {
    label_2:
    while (true) {
      primitive(kb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CUT:
      case NUMBER:
      case CHAR_LITERAL:
      case VAR:
      case ATOM:
      case 23:
      case 27:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
  }

  final public function primitive(kb:KnowledgeBase):void {
    var head:Term;
    var tok:Token=null;
    var opt:Boolean= true;
    var body:TermList= null;
      resetVDict();
    head = goal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
    case 21:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        jj_consume_token(21);
        tok = jj_consume_token(NUMBER);
                kb.addPrimitive( new Clause( head, new Primitive(tok.image)));
                opt = false;
        break;
      case 19:
        jj_consume_token(19);
        body = goals();
                kb.addPrimitive( new Clause( head, body));
                opt = false;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(20);
      if (opt) kb.addPrimitive( new Clause( head, null));
  }

  final public function goals():TermList {
    var t:Term;
    var head:TermList, last, p;
    t = goal();
                     head = last = new TermList(t) ;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(22);
      t = goal();
                last.next = p = new TermList( t );
                last = p;
    }
          {if (true) return head;}
    throw new Error("Missing return statement in function");
  }

  final public function pred():Term {
    var op:Token;
    var v:Vector= new Vector() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      op = jj_consume_token(ATOM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        jj_consume_token(23);
        arglist(v);
        jj_consume_token(24);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
        var arity:int= v.size();
        var terms:Array = new Array();
        for (var i:int= 0; i < arity ; i++)
            terms[i] = Term(v.elementAt(i));
        {if (true) return new Term( op.image.intern(), terms );}
      break;
    case CHAR_LITERAL:
      op = jj_consume_token(CHAR_LITERAL);
        var s:String= op.image;
        {if (true) return new Term( s.substring(1,s.length()-1).intern(),0);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public function arglist(v:Vector):void {
    var t:Term;
    t = arg();
                          v.addElement( t );
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(22);
      t = arg();
                          v.addElement( t );
    }
  }

// --------------------------------------
  final public function goal():Term {
    var x:Term;
    var s1:Term=null,
        s2=null,
        s3=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      jj_consume_token(23);
      s1 = goal_list();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
        s2 = goal_list();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        jj_consume_token(26);
        s3 = goal_list();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(24);
       if ( s2==null && s3 == null)
       {
                x = new Term("seq",1); x.setarg(0,s1);
                {if (true) return x;}
       }
       else if ( s2 == null) {if (true) return new Term( "or", s1, s3);}
       else if ( s3 == null) {if (true) return new Term( "if", s1, s2);}
       else {
           var ts:Array = new Array();;
           ts[0] = s1;
           ts[1] = s2;
           ts[2] = s3;
           {if (true) return new Term("if", ts);}
       }
      break;
    case NUMBER:
    case CHAR_LITERAL:
    case VAR:
    case ATOM:
    case 27:
      x = arg();
                   // System.out.println("   Goal: " + x );  
                   {if (true) return x;}
      break;
    case CUT:
      jj_consume_token(CUT);
                 {if (true) return  Term.CUT;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//------------------------  
  final public function goal_list():Term {
   var v:Vector= new Vector();
   var t:Term;
    t = goal();
                  v.addElement( t );
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(22);
      t = goal();
                    v.addElement( t );
    }
       var j:int= v.size();
       t = new Term("null",0);;
       while (--j >= 0)
          t = new Term("cons", Term(v.elementAt(j)), t);
       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public function arg():Term {
     var t1:Term, t2;
    var op:Token;
    t1 = sum();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELOP:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      op = jj_consume_token(RELOP);
      t2 = sum();
          t1 = new Term( op.image.intern(), t1, t2 );
    }
          {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public function sum():Term {
     var t1:Term, t2;
    var op:Token;
    t1 = factor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDOP:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      op = jj_consume_token(ADDOP);
      t2 = factor();
          t1 = new Term( op.image.intern(), t1, t2 );
    }
          {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public function factor():Term {
     var t1:Term, t2;
    var op:Token;
    t1 = operand();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULOP:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      op = jj_consume_token(MULOP);
      t2 = operand();
          t1 = new Term( op.image.intern(), t1, t2 );
    }
          {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public function operand():Term {
   var tok:Token;
    var t:Term;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR_LITERAL:
    case ATOM:
      t = pred();
        {if (true) return t ;}
      break;
    case VAR:
      tok = jj_consume_token(VAR);
        var s:String= tok.image;
        t = Term(vardict.get( s ));
        if (t==null) {
            t = new Term(varnum++);
            if (varnum>maxVarnum) maxVarnum = varnum;
            if( ! s.equals("_") )
                vardict.put( s,t);
        }
        {if (true) return t;}
      break;
    case NUMBER:
      tok = jj_consume_token(NUMBER);
        {if (true) return new Number( tok.image.intern() );}
      break;
    case 27:
      t = list();
        {if (true) return t;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public function list():Term  {
    var v:Vector= new Vector();
    jj_consume_token(27);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case CHAR_LITERAL:
    case VAR:
    case ATOM:
    case 27:
      listElems(v);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(28);
           if (v.size()==0)
                 {if (true) return new Term("null",0);}
            else
            {   var j:int= v.size()-1;
                var t:Term= Term(v.elementAt( j ));
                while (--j >= 0)
                    t = new Term("cons", Term(v.elementAt(j)), t);
                {if (true) return t;}
            }
    throw new Error("Missing return statement in function");
  }

  final public function listElems(v:Vector):void   {
    var t:Term= null;
    arglist(v);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      t = arg();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
           if (t== null)
                v.addElement(new Term("null",0) );
           else
                v.addElement( t );
  }

  public var token_source:ParserTokenManager;
  var jj_input_stream:SimpleCharStream;
  public var token:Token, jj_nt;
  private var jj_ntk:int;
  private var jj_gen:int;
  final private var jj_la1:Array= new int[19];
  final private var jj_la1_0:Array= [0xa000,0x80000,0x880e880,0x280000,0x280000,0x400000,0x800000,0xa000,0x400000,0x2000000,0x4000000,0x880e880,0x400000,0x400,0x100,0x200,0x800e800,0x800e800,0x20000000];

  public function Parser(stream:java.io.InputStream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (var i:int= 0; i < 19; i++) jj_la1[i] = -1;
  }

  public function ReInit(stream:java.io.InputStream):void {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (var i:int= 0; i < 19; i++) jj_la1[i] = -1;
  }

  /* public function Parser(stream:java.io.Reader) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (var i:int= 0; i < 19; i++) jj_la1[i] = -1;
  }

  public function ReInit(stream:java.io.Reader):void {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (var i:int= 0; i < 19; i++) jj_la1[i] = -1;
  }

  public function Parser(tm:ParserTokenManager) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (var i:int= 0; i < 19; i++) jj_la1[i] = -1;
  }

  public function ReInit(tm:ParserTokenManager):void {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (var i:int= 0; i < 19; i++) jj_la1[i] = -1;
  } */

  final private function jj_consume_token(kind:int):Token   {
    var oldToken:Token;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public function getNextToken():Token {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public function getToken(index:int):Token {
    var t:Token= token;
    for (var i:int= 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private function jj_ntk():int {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private var jj_expentries:java.util.Vector= new java.util.Vector();
  private var jj_expentry:Array;
  private var jj_kind:int= -1;

  final public function generateParseException():ParseException {
    jj_expentries.removeAllElements();
    var la1tokens:Array= new boolean[30];
    for (var i:int= 0; i < 30; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (var i:int= 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (var j:int= 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (var i:int= 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    var exptokseq:Array = new Array();
    for (var i:int= 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public function enable_tracing():void {
  }

  final public function disable_tracing():void {
  }

}
	
}
